-- 创建数据库
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'deepseek')
BEGIN
    CREATE DATABASE deepseek;
END
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    xixi
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding)
    VALUES (@content, @vector_embedding);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = @vector_embedding,
        updated_at = GETDATE()
    WHERE note_id = @note_id AND is_deleted = 0;

    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteNote')
EXEC('CREATE PROCEDURE DeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;

    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNote')
EXEC('CREATE PROCEDURE GetNote
    @note_id INT
AS
BEGIN
    SELECT n.*, 
           STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE n.note_id = @note_id AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按时间范围查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByDateRange')
EXEC('CREATE PROCEDURE GetNotesByDateRange
    @start_date DATETIME,
    @end_date DATETIME
AS
BEGIN
    SELECT n.*, 
           STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE n.created_at BETWEEN @start_date AND @end_date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

USE deepseek;
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding)
    VALUES (@content, @vector_embedding);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = @vector_embedding,
        updated_at = GETDATE()
    WHERE note_id = @note_id AND is_deleted = 0;

    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteNote')
EXEC('CREATE PROCEDURE DeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;

    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNote')
EXEC('CREATE PROCEDURE GetNote
    @note_id INT
AS
BEGIN
    SELECT n.*, 
           STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE n.note_id = @note_id AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按时间范围查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByDateRange')
EXEC('CREATE PROCEDURE GetNotesByDateRange
    @start_date DATETIME,
    @end_date DATETIME
AS
BEGIN
    SELECT n.*, 
           STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE n.created_at BETWEEN @start_date AND @end_date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 配置表
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'system_config')
BEGIN
    CREATE TABLE system_config (
        config_id INT IDENTITY(1,1) PRIMARY KEY,
        config_key NVARCHAR(50) NOT NULL UNIQUE,
        config_value NVARCHAR(MAX),
        description NVARCHAR(200),
        created_at DATETIME DEFAULT GETDATE(),
        updated_at DATETIME DEFAULT GETDATE()
    );
END

-- 用户笔记表
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'notes')
BEGIN
    CREATE TABLE notes (
        note_id INT IDENTITY(1,1) PRIMARY KEY,
        content NVARCHAR(MAX) NOT NULL,
        vector_embedding VARBINARY(MAX), -- 用于RAG检索的向量嵌入
        created_at DATETIME DEFAULT GETDATE(),
        updated_at DATETIME DEFAULT GETDATE(),
        is_deleted BIT DEFAULT 0
    );
END

-- 标签表
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'tags')
BEGIN
    CREATE TABLE tags (
        tag_id INT IDENTITY(1,1) PRIMARY KEY,
        tag_name NVARCHAR(50) NOT NULL UNIQUE,
        created_at DATETIME DEFAULT GETDATE()
    );
END

-- 笔记标签关联表
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'note_tags')
BEGIN
    CREATE TABLE note_tags (
        note_id INT,
        tag_id INT,
        created_at DATETIME DEFAULT GETDATE(),
        PRIMARY KEY (note_id, tag_id),
        FOREIGN KEY (note_id) REFERENCES notes(note_id),
        FOREIGN KEY (tag_id) REFERENCES tags(tag_id)
    );
END

-- AI对话记录表
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'conversations')
BEGIN
    CREATE TABLE conversations (
        conversation_id INT IDENTITY(1,1) PRIMARY KEY,
        user_input NVARCHAR(MAX),
        ai_response NVARCHAR(MAX),
        vector_embedding VARBINARY(MAX), -- 用于RAG检索的向量嵌入
        created_at DATETIME DEFAULT GETDATE()
    );
END

-- 活动总结表
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'summaries')
BEGIN
    CREATE TABLE summaries (
        summary_id INT IDENTITY(1,1) PRIMARY KEY,
        summary_type NVARCHAR(20) NOT NULL, -- 'daily', 'monthly', 'activity'
        content NVARCHAR(MAX),
        start_date DATE,
        end_date DATE,
        created_at DATETIME DEFAULT GETDATE()
    );
END

-- 复习提醒表
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'review_reminders')
BEGIN
    CREATE TABLE review_reminders (
        reminder_id INT IDENTITY(1,1) PRIMARY KEY,
        note_id INT,
        review_date DATE,
        review_interval INT, -- 复习间隔（天数）
        is_completed BIT DEFAULT 0,
        created_at DATETIME DEFAULT GETDATE(),
        FOREIGN KEY (note_id) REFERENCES notes(note_id)
    );
END

-- 创建索引
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_notes_created_at')
    CREATE INDEX IX_notes_created_at ON notes(created_at);

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_conversations_created_at')
    CREATE INDEX IX_conversations_created_at ON conversations(created_at);

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_summaries_date_type')
    CREATE INDEX IX_summaries_date_type ON summaries(start_date, summary_type);

-- 创建自动生成日总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    INSERT INTO summaries (summary_type, content, start_date, end_date)
    SELECT 
        ''daily'',
        CONCAT(
            ''笔记数量: '', 
            (SELECT COUNT(*) FROM notes WHERE CAST(created_at AS DATE) = @date),
            CHAR(10),
            ''对话数量: '',
            (SELECT COUNT(*) FROM conversations WHERE CAST(created_at AS DATE) = @date)
        ),
        @date,
        @date;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding)
    VALUES (@content, @vector_embedding);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = @vector_embedding,
        updated_at = GETDATE()
    WHERE note_id = @note_id AND is_deleted = 0;

    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteNote')
EXEC('CREATE PROCEDURE DeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;

    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNote')
EXEC('CREATE PROCEDURE GetNote
    @note_id INT
AS
BEGIN
    SELECT n.*, 
           STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE n.note_id = @note_id AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按时间范围查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByDateRange')
EXEC('CREATE PROCEDURE GetNotesByDateRange
    @start_date DATETIME,
    @end_date DATETIME
AS
BEGIN
    SELECT n.*, 
           STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE n.created_at BETWEEN @start_date AND @end_date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建自动生成月总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    DECLARE @start_date DATE = DATEFROMPARTS(@year, @month, 1);
    DECLARE @end_date DATE = EOMONTH(@start_date);
    
    INSERT INTO summaries (summary_type, content, start_date, end_date)
    SELECT 
        ''monthly'',
        CONCAT(
            ''月度笔记总数: '', 
            (SELECT COUNT(*) FROM notes WHERE created_at BETWEEN @start_date AND @end_date),
            CHAR(10),
            ''月度对话总数: '',
            (SELECT COUNT(*) FROM conversations WHERE created_at BETWEEN @start_date AND @end_date)
        ),
        @start_date,
        @end_date;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding)
    VALUES (@content, @vector_embedding);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = @vector_embedding,
        updated_at = GETDATE()
    WHERE note_id = @note_id AND is_deleted = 0;

    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteNote')
EXEC('CREATE PROCEDURE DeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;

    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNote')
EXEC('CREATE PROCEDURE GetNote
    @note_id INT
AS
BEGIN
    SELECT n.*, 
           STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE n.note_id = @note_id AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建按时间范围查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByDateRange')
EXEC('CREATE PROCEDURE GetNotesByDateRange
    @start_date DATETIME,
    @end_date DATETIME
AS
BEGIN
    SELECT n.*, 
           STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE n.created_at BETWEEN @start_date AND @end_date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建复习提醒触发器
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE name = 'TR_Notes_CreateReviewReminder')
EXEC('CREATE TRIGGER TR_Notes_CreateReviewReminder
ON notes
AFTER INSERT
AS
BEGIN
    DECLARE @note_id INT;
    SELECT @note_id = note_id FROM inserted;
    
    -- 根据艾宾浩斯遗忘曲线设置复习时间
    INSERT INTO review_reminders (note_id, review_date, review_interval)
    VALUES 
        (@note_id, DATEADD(day, 1, GETDATE()), 1),  -- 1天后复习
        (@note_id, DATEADD(day, 2, GETDATE()), 2),  -- 2天后复习
        (@note_id, DATEADD(day, 4, GETDATE()), 4),  -- 4天后复习
        (@note_id, DATEADD(day, 7, GETDATE()), 7),  -- 7天后复习
        (@note_id, DATEADD(day, 15, GETDATE()), 15); -- 15天后复习
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddTag')
EXEC('CREATE PROCEDURE AddTag
    @tag_name NVARCHAR(50)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SELECT SCOPE_IDENTITY() as tag_id;
    END
    ELSE
    BEGIN
        SELECT tag_id FROM tags WHERE tag_name = @tag_name;
    END
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name,
           COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY note_count DESC;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建为笔记添加标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNoteTag')
EXEC('CREATE PROCEDURE AddNoteTag
    @note_id INT,
    @tag_name NVARCHAR(50)
AS
BEGIN
    DECLARE @tag_id INT;
    
    -- 如果标签不存在，先创建标签
    IF NOT EXISTS (SELECT 1 FROM tags WHERE tag_name = @tag_name)
    BEGIN
        INSERT INTO tags (tag_name)
        VALUES (@tag_name);
        
        SET @tag_id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT @tag_id = tag_id FROM tags WHERE tag_name = @tag_name;
    END
    
    -- 添加笔记标签关联
    IF NOT EXISTS (SELECT 1 FROM note_tags WHERE note_id = @note_id AND tag_id = @tag_id)
    BEGIN
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
END');
GO

-- 创建更新笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'UpdateNote')
EXEC('CREATE PROCEDURE UpdateNote
    @note_id INT,
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    UPDATE notes
    SET content = @content,
        vector_embedding = ISNULL(@vector_embedding, vector_embedding),
        updated_at = GETDATE()
    WHERE note_id = @note_id;
END');
GO

-- 创建生成月度活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateMonthlySummary')
EXEC('CREATE PROCEDURE GenerateMonthlySummary
    @year INT,
    @month INT
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE YEAR(n.created_at) = @year
        AND MONTH(n.created_at) = @month
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO
        INSERT INTO note_tags (note_id, tag_id)
        VALUES (@note_id, @tag_id);
    END
    
    SELECT @tag_id as tag_id;
END');
GO

-- 创建按标签查询笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetNotesByTags')
EXEC('CREATE PROCEDURE GetNotesByTags
    @tags NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @tag_table TABLE (tag_name NVARCHAR(50));
    
    INSERT INTO @tag_table
    SELECT value FROM STRING_SPLIT(@tags, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        HAVING COUNT(DISTINCT t.tag_name) = (SELECT COUNT(*) FROM @tag_table)
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t2.tag_name, '','') as tags
        FROM notes n
        INNER JOIN note_tags nt ON n.note_id = nt.note_id
        INNER JOIN tags t ON nt.tag_id = t.tag_id
        LEFT JOIN note_tags nt2 ON n.note_id = nt2.note_id
        LEFT JOIN tags t2 ON nt2.tag_id = t2.tag_id
        WHERE t.tag_name IN (SELECT tag_name FROM @tag_table)
            AND n.is_deleted = 0
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建按关键词搜索笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SearchNotesByKeywords')
EXEC('CREATE PROCEDURE SearchNotesByKeywords
    @keywords NVARCHAR(MAX),
    @combine_type NVARCHAR(3) = ''OR''
AS
BEGIN
    DECLARE @keyword_table TABLE (keyword NVARCHAR(50));
    
    INSERT INTO @keyword_table
    SELECT value FROM STRING_SPLIT(@keywords, '','');
    
    IF @combine_type = ''AND''
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND NOT EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content NOT LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
    ELSE
    BEGIN
        SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
        FROM notes n
        LEFT JOIN note_tags nt ON n.note_id = nt.note_id
        LEFT JOIN tags t ON nt.tag_id = t.tag_id
        WHERE n.is_deleted = 0
        AND EXISTS (
            SELECT keyword
            FROM @keyword_table
            WHERE n.content LIKE ''%'' + keyword + ''%''
        )
        GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
        ORDER BY n.created_at DESC;
    END
END');
GO

-- 创建生成每日活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateDailySummary')
EXEC('CREATE PROCEDURE GenerateDailySummary
    @date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) = @date
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO

-- 创建添加笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'AddNote')
EXEC('CREATE PROCEDURE AddNote
    @content NVARCHAR(MAX),
    @vector_embedding VARBINARY(MAX) = NULL
AS
BEGIN
    INSERT INTO notes (content, vector_embedding, created_at, updated_at, is_deleted)
    VALUES (@content, @vector_embedding, GETDATE(), GETDATE(), 0);
    
    SELECT SCOPE_IDENTITY() as note_id;
END');
GO

-- 创建软删除笔记的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'SoftDeleteNote')
EXEC('CREATE PROCEDURE SoftDeleteNote
    @note_id INT
AS
BEGIN
    UPDATE notes
    SET is_deleted = 1,
        updated_at = GETDATE()
    WHERE note_id = @note_id;
    
    SELECT @@ROWCOUNT as affected_rows;
END');
GO

-- 创建删除标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'DeleteTag')
EXEC('CREATE PROCEDURE DeleteTag
    @tag_id INT
AS
BEGIN
    BEGIN TRANSACTION;
    
    DELETE FROM note_tags WHERE tag_id = @tag_id;
    DELETE FROM tags WHERE tag_id = @tag_id;
    
    SELECT @@ROWCOUNT as affected_rows;
    
    COMMIT TRANSACTION;
END');
GO

-- 创建查询所有标签的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GetAllTags')
EXEC('CREATE PROCEDURE GetAllTags
AS
BEGIN
    SELECT t.tag_id, t.tag_name, COUNT(nt.note_id) as note_count
    FROM tags t
    LEFT JOIN note_tags nt ON t.tag_id = nt.tag_id
    GROUP BY t.tag_id, t.tag_name
    ORDER BY t.tag_name;
END');
GO

-- 创建生成每周活动总结的存储过程
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'GenerateWeeklySummary')
EXEC('CREATE PROCEDURE GenerateWeeklySummary
    @start_date DATE
AS
BEGIN
    SELECT n.*, STRING_AGG(t.tag_name, '','') as tags
    FROM notes n
    LEFT JOIN note_tags nt ON n.note_id = nt.note_id
    LEFT JOIN tags t ON nt.tag_id = t.tag_id
    WHERE CAST(n.created_at AS DATE) BETWEEN @start_date AND DATEADD(DAY, 6, @start_date)
        AND n.is_deleted = 0
    GROUP BY n.note_id, n.content, n.vector_embedding, n.created_at, n.updated_at, n.is_deleted
    ORDER BY n.created_at;
END');
GO